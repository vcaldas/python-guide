# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011–2018 <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> &amp; <a href="https://realpython.com">Real Python</a>. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Edson Mendes De Oliveira Filho <filho30face@gmail.com>, 2017
# Claudio Rogerio, 2017
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-10 18:10+0100\n"
"PO-Revision-Date: 2017-03-18 10:45+0000\n"
"Last-Translator: Claudio Rogerio, 2017\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/own-16/teams/72945/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../writing/tests.rst:5
msgid "Testing Your Code"
msgstr "Testando seu código"

#: ../../writing/tests.rst:9
msgid "Testing your code is very important."
msgstr "Testar o seu código é muito importante."

#: ../../writing/tests.rst:11
msgid ""
"Getting used to writing testing code and running this code in parallel is "
"now considered a good habit. Used wisely, this method helps you define more "
"precisely your code's intent and have a more decoupled architecture."
msgstr ""
"Acostumar-se a escrever código de teste e a executar este código em paralelo"
" agora é considerado um bom hábito. Usado sabiamente, esse método ajuda você"
" a definir mais precisamente a intenção do seu código e ter uma arquitetura "
"mais desacoplada."

#: ../../writing/tests.rst:15
msgid "Some general rules of testing:"
msgstr "Algumas regras gerais de teste:"

#: ../../writing/tests.rst:17
msgid ""
"A testing unit should focus on one tiny bit of functionality and prove it "
"correct."
msgstr ""
"Uma unidade de teste deve se concentrar em um pequeno número de "
"funcionalidades e provar que tudo está correto."

#: ../../writing/tests.rst:20
msgid ""
"Each test unit must be fully independent. Each test must be able to run "
"alone, and also within the test suite, regardless of the order that they are"
" called. The implication of this rule is that each test must be loaded with "
"a fresh dataset and may have to do some cleanup afterwards. This is usually "
"handled by :meth:`setUp()` and :meth:`tearDown()` methods."
msgstr ""
"Cada unidade de teste deve ser totalmente independente. Cada teste deve ser "
"capaz de executar sozinho, e também dentro do conjunto de teste, "
"independentemente da ordem em que são chamados. A implicação desta regra é "
"que cada teste deve ser carregado com um novo conjunto de dados e talvez "
"seja necessário fazer alguma limpeza depois. Isso geralmente é gerenciado "
"pelos métodos :meth:`setUp()` e :meth:`tearDown()`."

#: ../../writing/tests.rst:26
msgid ""
"Try hard to make tests that run fast. If one single test needs more than a "
"few milliseconds to run, development will be slowed down or the tests will "
"not be run as often as is desirable. In some cases, tests can't be fast "
"because they need a complex data structure to work on, and this data "
"structure must be loaded every time the test runs. Keep these heavier tests "
"in a separate test suite that is run by some scheduled task, and run all "
"other tests as often as needed."
msgstr ""
"Tente arduamente fazer testes que funcionem rapidamente. Se um único teste "
"precisa de mais de alguns milissegundos para executar, o desenvolvimento "
"será diminuído ou os testes não serão executados com a frequência desejável."
" Em alguns casos, os testes não podem ser rápidos porque eles precisam de "
"uma estrutura de dados complexa para trabalhar, e esta estrutura de dados "
"deve ser carregada toda vez que o teste é executado. Mantenha esses testes "
"mais pesados em um conjunto de teste separado executado por alguma tarefa "
"agendada e execute todos os outros testes sempre que necessário."

#: ../../writing/tests.rst:34
msgid ""
"Learn your tools and learn how to run a single test or a test case. Then, "
"when developing a function inside a module, run this function's tests "
"frequently, ideally automatically when you save the code."
msgstr ""
"Aprenda suas ferramentas e aprenda como executar uma única prova ou um caso "
"de teste. Então, ao desenvolver uma função dentro de um módulo, execute os "
"testes dessa função freqüentemente, idealmente automaticamente quando você "
"salvar o código."

#: ../../writing/tests.rst:38
msgid ""
"Always run the full test suite before a coding session, and run it again "
"after. This will give you more confidence that you did not break anything in"
" the rest of the code."
msgstr ""
"Execute sempre o conjunto de teste completo antes de uma sessão de "
"codificação, e execute novamente depois. Isso lhe dará mais confiança de que"
" você não quebrou nada no resto do código."

#: ../../writing/tests.rst:42
msgid ""
"It is a good idea to implement a hook that runs all tests before pushing "
"code to a shared repository."
msgstr ""
"É uma boa ideia implementar um hook que executa todos os testes antes de "
"enviar o código para um repositório compartilhado."

#: ../../writing/tests.rst:45
msgid ""
"If you are in the middle of a development session and have to interrupt your"
" work, it is a good idea to write a broken unit test about what you want to "
"develop next. When coming back to work, you will have a pointer to where you"
" were and get back on track faster."
msgstr ""
"Caso estejas no meio de uma sessão de desenvolvimento e tiver que "
"interromper o seu trabalho, é uma boa ideia escrever um teste de unidade "
"quebrado sobre o que deseja desenvolver em seguida. Ao retornar ao "
"desenvolvimento, você terá um ponteiro para onde estavas e voltará ao "
"percurso mais rapidamente."

#: ../../writing/tests.rst:50
msgid ""
"The first step when you are debugging your code is to write a new test "
"pinpointing the bug. While it is not always possible to do, those bug "
"catching tests are among the most valuable pieces of code in your project."
msgstr ""
"O primeiro passo quando você estiver depurando o seu código é escrever um "
"novo teste identificando o bug. Embora nem sempre seja possível, esses "
"testes de detecção de falhas estão entre os mais valiosos itens de código do"
" seu projeto."

#: ../../writing/tests.rst:54
msgid ""
"Use long and descriptive names for testing functions. The style guide here "
"is slightly different than that of running code, where short names are often"
" preferred. The reason is testing functions are never called explicitly. "
"``square()`` or even ``sqr()`` is ok in running code, but in testing code "
"you would have names such as ``test_square_of_number_2()``, "
"``test_square_negative_number()``. These function names are displayed when a"
" test fails, and should be as descriptive as possible."
msgstr ""
"Use nomes longos e descritivos para testar funções. O guia de estilo aqui é "
"ligeiramente diferente do código de execução, onde os nomes curtos são "
"frequentemente preferidos. O motivo é que as funções de teste nunca são "
"chamadas explicitamente. ``square()`` ou mesmo ``sqr()`` está ok no código "
"em execução, mas no código de teste você teria nomes como "
"``test_square_of_number_2()``, ``test_square_negative_number()``. Esses "
"nomes de função são exibidos quando um teste falhar e deverá ser o mais "
"descritivo possível."

#: ../../writing/tests.rst:62
msgid ""
"When something goes wrong or has to be changed, and if your code has a good "
"set of tests, you or other maintainers will rely largely on the testing "
"suite to fix the problem or modify a given behavior. Therefore the testing "
"code will be read as much as or even more than the running code. A unit test"
" whose purpose is unclear is not very helpful in this case."
msgstr ""

#: ../../writing/tests.rst:69
msgid ""
"Another use of the testing code is as an introduction to new developers. "
"When someone will have to work on the code base, running and reading the "
"related testing code is often the best thing that they can do to start. They"
" will or should discover the hot spots, where most difficulties arise, and "
"the corner cases. If they have to add some functionality, the first step "
"should be to add a test to ensure that the new functionality is not already "
"a working path that has not been plugged into the interface."
msgstr ""

#: ../../writing/tests.rst:81
msgid "The Basics"
msgstr "O Básico"

#: ../../writing/tests.rst:85
msgid "unittest"
msgstr ""

#: ../../writing/tests.rst:87
msgid ""
":mod:`unittest` is the batteries-included test module in the Python standard"
" library. Its API will be familiar to anyone who has used any of the "
"JUnit/nUnit/CppUnit series of tools."
msgstr ""

#: ../../writing/tests.rst:91
msgid ""
"Creating test cases is accomplished by subclassing "
":class:`unittest.TestCase`."
msgstr ""
"Criar casos de teste será realizado escrevendo uma subclasse "
":class:`unittest.TestCase`."

#: ../../writing/tests.rst:104
msgid ""
"As of Python 2.7 unittest also includes its own test discovery mechanisms."
msgstr ""
"A partir do Python 2.7 o unittest também inclui seus próprios mecanismos de "
"descoberta de teste."

#: ../../writing/tests.rst:106
msgid ""
"`unittest in the standard library documentation "
"<http://docs.python.org/library/unittest.html>`_"
msgstr ""
"`unittest in the standard library documentation "
"<http://docs.python.org/library/unittest.html>`_"

#: ../../writing/tests.rst:110
msgid "Doctest"
msgstr "Doctest"

#: ../../writing/tests.rst:112
msgid ""
"The :mod:`doctest` module searches for pieces of text that look like "
"interactive Python sessions in docstrings, and then executes those sessions "
"to verify that they work exactly as shown."
msgstr ""

#: ../../writing/tests.rst:116
msgid ""
"Doctests have a different use case than proper unit tests: they are usually "
"less detailed and don't catch special cases or obscure regression bugs. They"
" are useful as an expressive documentation of the main use cases of a module"
" and its components. However, doctests should run automatically each time "
"the full test suite runs."
msgstr ""

#: ../../writing/tests.rst:122
msgid "A simple doctest in a function:"
msgstr ""

#: ../../writing/tests.rst:141
msgid ""
"When running this module from the command line as in ``python module.py``, "
"the doctests will run and complain if anything is not behaving as described "
"in the docstrings."
msgstr ""

#: ../../writing/tests.rst:148
msgid "Tools"
msgstr "Ferramentas"

#: ../../writing/tests.rst:152
msgid "py.test"
msgstr "py.test"

#: ../../writing/tests.rst:154
msgid ""
"py.test is a no-boilerplate alternative to Python's standard unittest "
"module."
msgstr ""

#: ../../writing/tests.rst:160
msgid ""
"Despite being a fully-featured and extensible test tool, it boasts a simple "
"syntax. Creating a test suite is as easy as writing a module with a couple "
"of functions:"
msgstr ""

#: ../../writing/tests.rst:173
msgid "and then running the `py.test` command:"
msgstr ""

#: ../../writing/tests.rst:195
msgid ""
"is far less work than would be required for the equivalent functionality "
"with the unittest module!"
msgstr ""

#: ../../writing/tests.rst:198
msgid "`py.test <https://docs.pytest.org/en/latest/>`_"
msgstr ""

#: ../../writing/tests.rst:202
msgid "Hypothesis"
msgstr ""

#: ../../writing/tests.rst:204
msgid ""
"Hypothesis is a library which lets you write tests that are parametrized by "
"a source of examples.  It then generates simple and comprehensible examples "
"that make your tests fail, letting you find more bugs with less work."
msgstr ""

#: ../../writing/tests.rst:212
msgid ""
"For example, testing lists of floats will try many examples, but report the "
"minimal example of each bug (distinguished exception type and location):"
msgstr ""

#: ../../writing/tests.rst:228
msgid ""
"Hypothesis is practical as well as very powerful and will often find bugs "
"that escaped all other forms of testing.  It integrates well with py.test, "
"and has a strong focus on usability in both simple and advanced scenarios."
msgstr ""

#: ../../writing/tests.rst:232
msgid "`hypothesis <https://hypothesis.readthedocs.io/en/latest/>`_"
msgstr ""

#: ../../writing/tests.rst:236
msgid "tox"
msgstr "tox"

#: ../../writing/tests.rst:238
msgid ""
"tox is a tool for automating test environment management and testing against"
" multiple interpreter configurations."
msgstr ""

#: ../../writing/tests.rst:245
msgid ""
"tox allows you to configure complicated multi-parameter test matrices via a "
"simple INI-style configuration file."
msgstr ""

#: ../../writing/tests.rst:248
msgid "`tox <https://tox.readthedocs.io/en/latest/>`_"
msgstr "`tox <https://tox.readthedocs.io/en/latest/>`_"

#: ../../writing/tests.rst:252
msgid "Unittest2"
msgstr "Unittest2"

#: ../../writing/tests.rst:254
msgid ""
"unittest2 is a backport of Python 2.7's unittest module which has an "
"improved API and better assertions over the one available in previous "
"versions of Python."
msgstr ""

#: ../../writing/tests.rst:257
msgid "If you're using Python 2.6 or below, you can install it with pip:"
msgstr ""

#: ../../writing/tests.rst:263
msgid ""
"You may want to import the module under the name unittest to make porting "
"code to newer versions of the module easier in the future"
msgstr ""

#: ../../writing/tests.rst:273
msgid ""
"This way if you ever switch to a newer Python version and no longer need the"
" unittest2 module, you can simply change the import in your test module "
"without the need to change any other code."
msgstr ""

#: ../../writing/tests.rst:277
msgid "`unittest2 <http://pypi.python.org/pypi/unittest2>`_"
msgstr "`unittest2 <http://pypi.python.org/pypi/unittest2>`_"

#: ../../writing/tests.rst:281
msgid "mock"
msgstr "mock"

#: ../../writing/tests.rst:283
msgid ""
":mod:`unittest.mock` is a library for testing in Python. As of Python 3.3, "
"it is available in the `standard library "
"<https://docs.python.org/dev/library/unittest.mock>`_."
msgstr ""
":mod:`unittest.mock` é uma biblioteca para a realização de testes em Python."
" A partir da versão do Python 3.3, está disponível a `standard library "
"<https://docs.python.org/dev/library/unittest.mock>`_."

#: ../../writing/tests.rst:287
msgid "For older versions of Python:"
msgstr "Para as versões mais antigas do Python:"

#: ../../writing/tests.rst:293
msgid ""
"It allows you to replace parts of your system under test with mock objects "
"and make assertions about how they have been used."
msgstr ""

#: ../../writing/tests.rst:296
msgid "For example, you can monkey-patch a method:"
msgstr ""

#: ../../writing/tests.rst:307
msgid ""
"To mock classes or objects in a module under test, use the ``patch`` "
"decorator. In the example below, an external search system is replaced with "
"a mock that always returns the same result (but only for the duration of the"
" test)."
msgstr ""

#: ../../writing/tests.rst:326
msgid ""
"Mock has many other ways you can configure it and control its behavior."
msgstr ""

#: ../../writing/tests.rst:328
msgid "`mock <http://www.voidspace.org.uk/python/mock/>`_"
msgstr "`mock <http://www.voidspace.org.uk/python/mock/>`_"
