# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011–2018 <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> &amp; <a href="https://realpython.com">Real Python</a>. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Jonatha Daguerre <jonatha@daguerre.com.br>, 2018
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-10 18:10+0100\n"
"PO-Revision-Date: 2017-03-18 10:44+0000\n"
"Last-Translator: Jonatha Daguerre <jonatha@daguerre.com.br>, 2018\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/own-16/teams/72945/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../scenarios/serialization.rst:4
msgid "Data Serialization"
msgstr "Serialização de dados"

#: ../../scenarios/serialization.rst:11
msgid "What is data serialization?"
msgstr "O que é serialização de dados?"

#: ../../scenarios/serialization.rst:13
msgid ""
"Data serialization is the process of converting structured data to a format "
"that allows sharing or storage of the data in a form that allows recovery of"
" its original structure. In some cases, the secondary intention of data "
"serialization is to minimize the data's size which then reduces disk space "
"or bandwidth requirements."
msgstr ""

#: ../../scenarios/serialization.rst:21
msgid "Flat vs. Nested data"
msgstr ""

#: ../../scenarios/serialization.rst:23
msgid ""
"Before beginning to serialize data, it is important to identify or decide "
"how the data should be structured during data serialization - flat or "
"nested. The differences in the two styles are shown in the below examples."
msgstr ""

#: ../../scenarios/serialization.rst:27
msgid "Flat style:"
msgstr ""

#: ../../scenarios/serialization.rst:34
msgid "Nested style:"
msgstr ""

#: ../../scenarios/serialization.rst:42
msgid ""
"For more reading on the two styles, please see the discussion on `Python "
"mailing list <https://mail.python.org/pipermail/python-"
"list/2010-October/590762.html>`__, `IETF mailing list <https://www.ietf.org"
"/mail-archive/web/json/current/msg03739.html>`__ and `in stackexchange "
"<https://softwareengineering.stackexchange.com/questions/350623/flat-or-"
"nested-json-for-hierarchal-data>`__."
msgstr ""

#: ../../scenarios/serialization.rst:49
msgid "Serializing Text"
msgstr ""

#: ../../scenarios/serialization.rst:53
msgid "Simple file (flat data)"
msgstr ""

#: ../../scenarios/serialization.rst:55
msgid ""
"If the data to be serialized is located in a file and contains flat data, "
"Python offers two methods to serialize data."
msgstr ""

#: ../../scenarios/serialization.rst:58
msgid "repr"
msgstr ""

#: ../../scenarios/serialization.rst:60
msgid ""
"The repr method in Python takes a single object parameter and returns a "
"printable representation of the input:"
msgstr ""

#: ../../scenarios/serialization.rst:79
msgid "ast.literal_eval"
msgstr ""

#: ../../scenarios/serialization.rst:81
msgid ""
"The literal_eval method safely parses and evaluates an expression for a "
"Python datatype. Supported data types are: strings, numbers, tuples, lists, "
"dicts, booleans, and None."
msgstr ""

#: ../../scenarios/serialization.rst:90
msgid "CSV file (flat data)"
msgstr ""

#: ../../scenarios/serialization.rst:92
msgid ""
"The CSV module in Python implements classes to read and write tabular data "
"in CSV format."
msgstr ""

#: ../../scenarios/serialization.rst:95
msgid "Simple example for reading:"
msgstr ""

#: ../../scenarios/serialization.rst:106
msgid "Simple example for writing:"
msgstr ""

#: ../../scenarios/serialization.rst:117
msgid ""
"The module's contents, functions, and examples can be found `in the Python "
"documentation <https://docs.python.org/3/library/csv.html>`__."
msgstr ""

#: ../../scenarios/serialization.rst:122
msgid "YAML (nested data)"
msgstr ""

#: ../../scenarios/serialization.rst:124
msgid ""
"There are many third party modules to parse and read/write YAML file "
"structures in Python. One such example is below."
msgstr ""

#: ../../scenarios/serialization.rst:137
msgid ""
"Documentation on the third party module can be found `in the PyYAML "
"Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`__."
msgstr ""

#: ../../scenarios/serialization.rst:142
msgid "JSON file (nested data)"
msgstr ""

#: ../../scenarios/serialization.rst:144
msgid ""
"Python's JSON module can be used to read and write JSON files. Example code "
"is below."
msgstr ""

#: ../../scenarios/serialization.rst:147
msgid "Reading:"
msgstr ""

#: ../../scenarios/serialization.rst:156
msgid "Writing:"
msgstr ""

#: ../../scenarios/serialization.rst:167
msgid "XML (nested data)"
msgstr ""

#: ../../scenarios/serialization.rst:169
msgid "XML parsing in Python is possible using the `xml` package."
msgstr ""

#: ../../scenarios/serialization.rst:171 ../../scenarios/serialization.rst:194
msgid "Example:"
msgstr ""

#: ../../scenarios/serialization.rst:180
msgid ""
"More documentation on using the `xml.dom` and `xml.sax` packages can be "
"found `in the Python XML library documentation "
"<https://docs.python.org/3/library/xml.html>`__."
msgstr ""

#: ../../scenarios/serialization.rst:186
msgid "Binary"
msgstr ""

#: ../../scenarios/serialization.rst:190
msgid "NumPy Array (flat data)"
msgstr ""

#: ../../scenarios/serialization.rst:192
msgid ""
"Python's NumPy array can be used to serialize and deserialize data to and "
"from byte representation."
msgstr ""

#: ../../scenarios/serialization.rst:210
msgid "Pickle (nested data)"
msgstr ""

#: ../../scenarios/serialization.rst:212
msgid ""
"The native data serialization module for Python is called `Pickle "
"<https://docs.python.org/2/library/pickle.html>`_."
msgstr ""
"O módulo de serialização de dados nativos para Python é chamado `Pickle "
"<https://docs.python.org/2/library/pickle.html>`_."

#: ../../scenarios/serialization.rst:215
msgid "Here's an example:"
msgstr "Aqui está um exemplo:"

#: ../../scenarios/serialization.rst:233
msgid "Protobuf"
msgstr "Protobuf"

#: ../../scenarios/serialization.rst:235
msgid ""
"If you're looking for a serialization module that has support in multiple "
"languages, Google's `Protobuf <https://developers.google.com/protocol-"
"buffers>`_ library is an option."
msgstr ""
"Se você está procurando por um módulo de serialização com suporte em vários "
"idiomas, a biblioteca `Protobuf <https://developers.google.com/protocol-"
"buffers>`_ do Google é uma opção."
