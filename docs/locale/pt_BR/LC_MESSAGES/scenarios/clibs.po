# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011â€“2018 <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> &amp; <a href="https://realpython.com">Real Python</a>. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-10 18:10+0100\n"
"PO-Revision-Date: 2017-03-18 10:44+0000\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/own-16/teams/72945/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../scenarios/clibs.rst:4
msgid "Interfacing with C/C++ Libraries"
msgstr ""

#: ../../scenarios/clibs.rst:11
msgid "C Foreign Function Interface"
msgstr ""

#: ../../scenarios/clibs.rst:13
msgid ""
"`CFFI <https://cffi.readthedocs.io/en/latest/>`_ provides a simple to use "
"mechanism for interfacing with C from both CPython and PyPy. It supports two"
" modes: an inline ABI compatibility mode (example provided below), which "
"allows you to dynamically load and run functions from executable modules "
"(essentially exposing the same functionality as LoadLibrary or dlopen), and "
"an API mode, which allows you to build C extension modules."
msgstr ""

#: ../../scenarios/clibs.rst:21
msgid "ABI Interaction"
msgstr ""

#: ../../scenarios/clibs.rst:37
msgid "ctypes"
msgstr ""

#: ../../scenarios/clibs.rst:39
msgid ""
"`ctypes <https://docs.python.org/3/library/ctypes.html>`_ is the de facto "
"standard library for interfacing with C/C++ from CPython, and it provides "
"not only full access to the native C interface of most major operating "
"systems (e.g., kernel32 on Windows, or libc on \\*nix), but also provides "
"support for loading and interfacing with dynamic libraries, such as DLLs or "
"shared objects, at runtime. It does bring along with it a whole host of "
"types for interacting with system APIs, and allows you to rather easily "
"define your own complex types, such as structs and unions, and allows you to"
" modify things such as padding and alignment, if needed. It can be a bit "
"crufty to use, but in conjunction with the `struct "
"<https://docs.python.org/3.5/library/struct.html>`_ module, you are "
"essentially provided full control over how your data types get translated "
"into something usable by a pure C(++) method."
msgstr ""

#: ../../scenarios/clibs.rst:53
msgid "Struct Equivalents"
msgstr ""

#: ../../scenarios/clibs.rst:55
msgid ":file:`MyStruct.h`"
msgstr ""

#: ../../scenarios/clibs.rst:65
msgid ":file:`MyStruct.py`"
msgstr ""

#: ../../scenarios/clibs.rst:78
msgid "SWIG"
msgstr ""

#: ../../scenarios/clibs.rst:80
msgid ""
"`SWIG <http://www.swig.org>`_, though not strictly Python focused (it "
"supports a large number of scripting languages), is a tool for generating "
"bindings for interpreted languages from C/C++ header files. It is extremely "
"simple to use: the consumer simply needs to define an interface file "
"(detailed in the tutorial and documentations), include the requisite C/C++ "
"headers, and run the build tool against them. While it does have some limits"
" (it currently seems to have issues with a small subset of newer C++ "
"features, and getting template-heavy code to work can be a bit verbose), it "
"provides a great deal of power and exposes lots of features to Python with "
"little effort. Additionally, you can easily extend the bindings SWIG creates"
" (in the interface file) to overload operators and built-in methods, "
"effectively re- cast C++ exceptions to be catchable by Python, etc."
msgstr ""

#: ../../scenarios/clibs.rst:94
msgid "Example: Overloading __repr__"
msgstr ""

#: ../../scenarios/clibs.rst:96
msgid ":file:`MyClass.h`"
msgstr ""

#: ../../scenarios/clibs.rst:110
msgid ":file:`myclass.i`"
msgstr ""

#: ../../scenarios/clibs.rst:135
msgid "Boost.Python"
msgstr ""

#: ../../scenarios/clibs.rst:137
msgid ""
"`Boost.Python <http://www.boost.org/doc/libs/1_59_0/libs/python/doc/>`_ "
"requires a bit more manual work to expose C++ object functionality, but it "
"is capable of providing all the same features SWIG does and then some, to "
"include providing wrappers to access PyObjects in C++, extracting SWIG "
"wrapper objects, and even embedding bits of Python into your C++ code."
msgstr ""
