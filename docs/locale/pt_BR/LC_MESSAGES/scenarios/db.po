# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011–2018 <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> &amp; <a href="https://realpython.com">Real Python</a>. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Edson Mendes De Oliveira Filho <filho30face@gmail.com>, 2017
# Claudio Rogerio, 2017
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-10 18:10+0100\n"
"PO-Revision-Date: 2017-03-18 10:44+0000\n"
"Last-Translator: Claudio Rogerio, 2017\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/own-16/teams/72945/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../scenarios/db.rst:4
msgid "Databases"
msgstr "Bancos de dados"

#: ../../scenarios/db.rst:11
msgid "DB-API"
msgstr "DB-API"

#: ../../scenarios/db.rst:13
msgid ""
"The Python Database API (DB-API) defines a standard interface for Python "
"database access modules. It's documented in :pep:`249`. Nearly all Python "
"database modules such as `sqlite3`, `psycopg`, and `mysql-python` conform to"
" this interface."
msgstr ""

#: ../../scenarios/db.rst:18
msgid ""
"Tutorials that explain how to work with modules that conform to this "
"interface can be found `here "
"<http://halfcooked.com/presentations/osdc2006/python_databases.html>`__ and "
"`here "
"<http://web.archive.org/web/20120815130844/http://www.amk.ca/python/writing"
"/DB-API.html>`__."
msgstr ""
"Podem ser encontrados tutoriais que explicam como trabalhar com módulos que "
"estejam em conformidade com esta interface `aqui "
"<http://halfcooked.com/presentations/osdc2006/python_databases.html>`__ e "
"`aqui <http://web.archive.org "
"/web/20120815130844/http://www.amk.ca/python/writing/DB-API.html>`__."

#: ../../scenarios/db.rst:25
msgid "SQLAlchemy"
msgstr "SQLAlchemy"

#: ../../scenarios/db.rst:27
msgid ""
"`SQLAlchemy <http://www.sqlalchemy.org/>`_ is a commonly used database "
"toolkit. Unlike many database libraries it not only provides an ORM layer "
"but also a generalized API for writing database-agnostic code without SQL."
msgstr ""
"O `SQLAlchemy <http://www.sqlalchemy.org/>`_ é um conjunto de ferramentas de"
" banco de dados comum. Ao contrário de muitas bibliotecas de banco de dados,"
" ele não só fornece uma camada ORM, mas também uma API generalizada para "
"escrever o código agnóstico do banco de dados sem SQL."

#: ../../scenarios/db.rst:38
msgid "Records"
msgstr "Records"

#: ../../scenarios/db.rst:40
msgid ""
"`Records <https://github.com/kennethreitz/records>`_ is minimalist SQL "
"library, designed for sending raw SQL queries to various databases. Data can"
" be used programmatically or exported to a number of useful data formats."
msgstr ""

#: ../../scenarios/db.rst:48
msgid "Also included is a command-line tool for exporting SQL data."
msgstr ""
"Também está incluída uma ferramenta de linha de comando para exportação de "
"dados SQL."

#: ../../scenarios/db.rst:53
msgid "Django ORM"
msgstr "Django ORM"

#: ../../scenarios/db.rst:55
msgid ""
"The Django ORM is the interface used by `Django "
"<http://www.djangoproject.com>`_ to provide database access."
msgstr ""
"O Django ORM é a interface usada pelo `Django "
"<http://www.djangoproject.com>`_ para fornecer acesso ao banco de dados."

#: ../../scenarios/db.rst:58
msgid ""
"It's based on the idea of `models <https://docs.djangoproject.com/en/dev"
"/#the-model-layer>`_, an abstraction that makes it easier to manipulate data"
" in Python."
msgstr ""
"Baseia-se na ideia de `modelos <https://docs.djangoproject.com/en/dev/#the-"
"model-layer>`_, uma abstração que facilita a manipulação de dados em Python."

#: ../../scenarios/db.rst:62
msgid "The basics:"
msgstr "O básico:"

#: ../../scenarios/db.rst:64
msgid "Each model is a Python class that subclasses django.db.models.Model."
msgstr ""
"Cada modelo é uma classe Python e que é uma subclasse de "
"``django.db.models.Model``."

#: ../../scenarios/db.rst:65
msgid "Each attribute of the model represents a database field."
msgstr "Cada atributo do modelo representa um campo de banco de dados."

#: ../../scenarios/db.rst:66
msgid ""
"Django gives you an automatically-generated database-access API; see `Making"
" queries <https://docs.djangoproject.com/en/dev/topics/db/queries/>`__."
msgstr ""
"O Django oferece uma API de acesso ao banco de dados gerada automaticamente;"
"  `Making queries "
"<https://docs.djangoproject.com/en/dev/topics/db/queries/>`__."

#: ../../scenarios/db.rst:72
msgid "peewee"
msgstr "peewee"

#: ../../scenarios/db.rst:74
msgid ""
"`peewee <http://docs.peewee-orm.com/en/latest/>`_ is another ORM with a "
"focus on being lightweight with support for Python 2.6+ and 3.2+ which "
"supports SQLite, MySQL, and PostgreSQL by default. The `model layer "
"<https://peewee.readthedocs.io/en/latest/peewee/quickstart.html#model-"
"definition>`_ is similar to that of the Django ORM and it has `SQL-like "
"methods <https://peewee.readthedocs.io/en/latest/peewee/quickstart.html"
"#retrieving-data>`_ to query data. While SQLite, MySQL, and PostgreSQL are "
"supported out-of-the-box, there is a `collection of add-ons "
"<https://peewee.readthedocs.io/en/latest/peewee/playhouse.html#playhouse>`_ "
"available."
msgstr ""

#: ../../scenarios/db.rst:87
msgid "PonyORM"
msgstr "PonyORM"

#: ../../scenarios/db.rst:89
msgid ""
"`PonyORM <http://ponyorm.com/>`_ is an ORM that takes a different approach "
"to querying the database. Instead of writing an SQL-like language or boolean"
" expressions, Python's generator syntax is used. There's also a graphical "
"schema editor that can generate PonyORM entities for you. It supports Python"
" 2.6+ and Python 3.3+ and can connect to SQLite, MySQL, PostgreSQL, and "
"Oracle."
msgstr ""

#: ../../scenarios/db.rst:98
msgid "SQLObject"
msgstr "SQLObject"

#: ../../scenarios/db.rst:100
msgid ""
"`SQLObject <http://www.sqlobject.org/>`_ is yet another ORM. It supports a "
"wide variety of databases: common database systems like MySQL, PostgreSQL, "
"and SQLite and more exotic systems like SAP DB, SyBase, and Microsoft SQL "
"Server. It only supports Python 2 from Python 2.6 upwards."
msgstr ""
